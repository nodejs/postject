version: 2.1

common_parameters: &common_parameters
  os:
    type: enum
    enum: [ alpine, debian, linux, macos, "win/default" ]

## ORBS ##

orbs:
  win: circleci/windows@4.1.1

## EXECUTORS ##

executors:
  alpine:
    resource_class: medium
    docker:
      - image: docker.io/library/alpine:3.16

  debian:
    resource_class: medium
    docker:
      - image: docker.io/library/debian:11

  linux:
    resource_class: medium
    machine:
      image: ubuntu-2004:202101-01

  macos:
    resource_class: medium
    macos:
      xcode: 13.4.1

## COMMANDS ##

commands:
  prepare:
    parameters:
      <<: *common_parameters
    steps:
      - when:
          condition:
            equal: [ alpine, << parameters.os >> ]
          steps:
            - run: apk update
            - run: apk add --no-cache build-base git nodejs npm ninja cmake python3 python3-dev py3-setuptools

      - when:
          condition:
            equal: [ debian, << parameters.os >> ]
          steps:
            - run: apt-get update
            - run: apt-get install --no-install-recommends -y ca-certificates build-essential git nodejs npm ninja-build cmake python3 python3-dev python3-setuptools

      - when:
          condition:
            equal: [ macos, << parameters.os >> ]
          steps:
            - run: brew install cmake
            - run: brew install ninja

      - when:
          condition:
            equal: [ "win/default", << parameters.os >> ]
          steps:
            - run: choco install cmake.install --installargs '"ADD_CMAKE_TO_PATH=User"'
            - run: choco install ninja

      - run: git clone https://github.com/emscripten-core/emsdk.git

      - when:
          condition:
            equal: [ "win/default", << parameters.os >> ]
          steps:
            - run:
               command: cd emsdk & emsdk install latest
               shell: cmd.exe

      - when:
          condition:
            not:
              equal: [ "win/default", << parameters.os >> ]
          steps:
            - run: cd emsdk && ./emsdk install latest
            - run: cd emsdk && ./emsdk activate latest

      - run: npm install

  build:
    parameters:
      <<: *common_parameters
    steps:
      - when:
          condition:
            not:
              equal: [ "win/default", << parameters.os >> ]
          steps:
            - run:
                # NOTE: the circle ci container executor reports the memory/cpu stats
                # of the host machine (https://ideas.circleci.com/ideas/CCI-I-578),
                # `nproc` will return 36 on docker/medium resource_class,
                # ninja parallelizes accordingly, which leads to overloading
                # and circleci eventually terminating the builds:
                #
                # ninja: job failed: /usr/bin/c++ [...]
                # c++: fatal error: Killed signal terminated program cc1plus
                # compilation terminated
                #
                # force overwrite job count here:
                command: cd emsdk && source ./emsdk_env.sh && cd .. && npm run build -- --jobs=3

      - when:
          condition:
            equal: [ "win/default", << parameters.os >> ]
          steps:
            - run:
               command: refreshenv & cd emsdk & emsdk activate latest & cd .. & npm run build
               shell: cmd.exe

      - persist_to_workspace:
          root: .
          paths:
            - build
            - dist
            - emsdk

  test:
    steps:
      - attach_workspace:
          at: .

      - run: npm test

## JOBS ##

jobs:
  build:
    parameters:
      <<: *common_parameters
    executor: { name: << parameters.os >> }
    steps:
      - checkout
      - prepare:
          os: << parameters.os >>
      - build:
          os: << parameters.os >>
      - store_artifacts:
          path: dist
  
  test:
    parameters:
      <<: *common_parameters
    executor: { name: << parameters.os >> }
    steps:
      - checkout
      - prepare:
          os: << parameters.os >>
      - test

## WORKFLOWS ##

matrix: &matrix
  matrix:
    parameters:
      os: [ alpine, debian, linux, macos, "win/default" ]

workflows:
  postject:
    jobs:
      - build:
          <<: *matrix
      - test:
          <<: *matrix
          requires: [ build-<<matrix.os>> ]

